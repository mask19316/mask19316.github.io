{"pages":[{"title":"关于","text":"摘抄 “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ “无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。” 博客信息 网站采用基于Icarus主题 的hexo-theme-amazing主题 参考文档 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法","link":"/about/index.html"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"}],"posts":[{"title":"Linux小技巧","text":"安全擦除硬盘数据 1$ dd if=/dev/urandom of=/dev/sdb //生成随机数写入sdb硬盘 查看某进程的运行时间 1234$ ps -p 117279 -o etimes,etimeELAPSED ELAPSED 2351 39:11# -o参数，指定只显示的某字段，etime获取该进程的运行时间，etimes为时间戳 时间戳转换 1234$ date -d@1606405921 &quot;+%Y-%m-%d %H:%M:%S&quot;2020-11-26 23:52:01$ date +%s1606405921 删除乱码文件 1234$ ls -i33574982 init.sh 33607045 ?????????txt$ find . -inum 33607045 -exec rm {} \\;# -inum 指定文件的 inode 号，找到后执行删除 Linux上获取本机公网IP 12$ curl ip.sb$ curl ifconfig.xyz 历史命令使用技巧 12345678910111213141516171819202122232425262728293031323334!! ：重复执行上条命令；!N ：重复执行 history 历史中第 N 条命令，N 可以通过 history 查看；!pw ：重复执行最近一次，以pw开头的历史命令；!$ ：表示最近一次命令的最后一个参数，使用快捷键&quot;Esc + .&quot;或者&quot;alt + .&quot;；Ctrl + r ：搜索历史命令；不写入历史命令：$ export HISTCONTROL=ignorespace //当前终端生效$ echo 1$ echo 2$ echo 3$ history | tail -n 4 130 export HISTCONTROL=ignorespace 131 echo 1 132 echo 3 133 history | tail -n 4$ echo HISTCONTROL=ignorespace &gt;&gt; ~/.bashrc// 当前用户的bash shell的bash信息,当该用户登录时以及每次打开新的shell时,该文件被读取.$ source ~/.bashrc// 刷新当前shell环境history选项:-d [num]：删除该编号的命令-c：清空命令-a：追加当前会话的历史命令至历史文件中去；-n：把文件历史命令加入到当前 history中-w：把当前shell 的history显示的追加到文件中-r：查看历史命令值： HISTSIZE: 命令历史中可以保存的命令个数 HISTFILE: 命令历史文件 HISTFILESIZE: 命令历史文件可以保存的个数 HISTCONTROL : 控制命令历史的生成 igoredups ：忽略记录重复的命令，连续相同的命令才叫重复的 ignorespace：不记录以空格开头的命令 ignoreboth ：同时具有上面两种特性 获取多天前的日期 12345678910# date -d '-1 day ago' +%F //获取一天之后的日期,以+%F格式，其他的类似eg:在linux环境下：x用数字代替，如果需要几天前的直接写正数，如果要几天后的日期直接写负数即可：date -d &quot;x days ago&quot; +%Y%m%dx用数字代替，如果需要几周前的直接写正数，如果要几周后的日期直接写负数即可：date -d &quot;x weeks ago&quot; +%Y%m%dx用数字代替，如果需要几年前的直接写正数，如果要几年后的日期直接写负数即可：date -d &quot;x years ago&quot; +%Y%m%d 批量压缩并删除源文件 123# find . -name &quot;*.log&quot; -type f -exec tar czf {}.tar.gz {} --remove-files &gt; /dev/null \\;解压缩并删除压缩文件# find . -name &quot;*.tar.gz&quot; -type f -exec tar -zxvf {} \\; -exec rm -rf {} \\; &gt; /dev/null while read line与for循环的区别 123while read line是一次性讲文件信息读入并按行赋值给变量linewhile中使用重定向将文件中所有信息读入并重定向给整个while语句中的line变量for循环时每次读取文件中以一个空格为分割符的字符串 linux 使用find命令查找包含某字符串的文件 1find . | xargs grep -ri &quot;xxx&quot; //查找当前目录下包含&quot;xxx&quot;字符串的文件","link":"/posts/3659348374/"},{"title":"hexo-abbrlink导致图片不能显示","text":"安装了hexo-abbrlink后图片无法正常显示 图片插件用的是hexo-aset-image 原_config.yml的permalink配置： 1permalink: posts/:abbrlink.html 在hexo g后，文章连接被重定向，与图片位置不符 修改_config.yml后解决: 1permalink: posts/:abbrlink/ 参考连接","link":"/posts/1721053512/"},{"title":"Hexo美化url","text":"hexo文章链接默认的生成规则是：:year/:month/:day/:title 如果文章标题是中文的话，后面的 title 还会被 urlencode 变成一长串，非常不利于阅读，更不利于 SEO 美化开始 安装插件 1npm install hexo-abbrlink --save //在博客主页打开git bash 打开_config.yml，修改permalink 1234permalink: posts/:abbrlink.htmlabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: dec # 进制：dec(default) and hex permalink: posts/:abbrlink.html使用该写法可能会导致图片不显示问题，可参考permalink: posts/:abbrlink/写法。 参考算法 算法 进制 结果 crc16 hex https://example.com/posts/3ab2.html crc16 dec https://example.com/posts/12768.html crc32 hex https://example.com/posts/9a8b6c4d.html crc32 dec https://example.com/posts/1690090958.html 验证 12hexo cleanhexo g","link":"/posts/3632775017/"},{"title":"hexo-theme-amazing主题设置为中文","text":"amazing基于Lcarus主题，将主题语言设置为中文，修改博客根目录下的_config.yml文件： 12language: zh-CNtheme: amazing 再重新部署即可： 123hexo cleanhexo ghexo s","link":"/posts/2360592034/"},{"title":"hexo-theme-amazing文章置顶","text":"置顶设置.md文章头部数据中加入top，top值越大越靠前，大于0显示置顶图标。 首先确认hexo-generator-index插件是否安装，无则安装。 1npm list hexo-generator-index 修改依赖包中文件amazing/node_modules/hexo-generator-index/lib/generator.js如下： 12345678910111213141516171819202122232425262728'use strict';const pagination = require('hexo-pagination');module.exports = function(locals){ var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) { if(a.top == undefined){ a.top = 0; } if(b.top == undefined){ b.top = 0; } if(a.top == b.top){ return b.date - a.date; }else{ return b.top - a.top; } }); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, { perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: { __index: true } });};","link":"/posts/3146531613/"},{"title":"ps扣图片上的毛笔字","text":"第一步，打开ps，双击灰色屏幕打开需要抠的毛笔字图片，把图层解锁（双击图层即可解锁） 第二步，点击- 通道栏，将任意图层拖拽到下边复制新图层（如图） 注意：黑白对比度越强烈的图层，对抠图效果越好 第三步，打开图像-调整-色阶，将小白块和小黑块往中间移动（如图），点击确定。这样做是为了增加黑白对比度，方便后面抠图 第四步，点击通道栏下方-将通道做为选区载入 按钮（如图），按住ctrl+shift+I 组合键进行反选 第五步，按住ctrl+c复制，然后新建图层，按住ctrl+v粘贴，即可把毛笔字单独抠出来 如果想再次移动毛笔字，按住ctrl键用鼠标点击图层小方框（如图所示），用移动工具可以移动到其他位置或者图片中。然后按 ctrl+D 组合键取消选区。 参考文档","link":"/posts/2180175259/"},{"title":"VMware热添加硬盘","text":"VMware热添加硬盘1234# cat /proc/scsi/scsi # 查看scsi的驱动号# ls /sys/class/scsi_host/# echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host0/scan# echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host*/scan 12echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host0/scan //这个 scan 属性支持以&quot;-&quot;作为通配符，如以下命令可以执行让整个 scsi_host 进行重新搜索，这个功能用于调试某些对热挺拔实现不 完善的 SCSI 驱动程序很有用host0处是host1，还是host2，取决于 cat /proc/scsi/scsi 之后的 scsi 驱动器的号","link":"/posts/2910231512/"},{"title":"复制一个文件到多个目录","text":"假如想要复制一个文件到多个文件夹中，可以使用cp命令、echo命令、管道、xargs命令一起使用： 12# echo /usr/local/src/ /usr/src/ | xargs -n 1 cp -v /usr/local/src/test.sh# 将/usr/local/src/test.sh复制到/usr/local/src/和/usr/src/下 将一个文件复制成多个文件 12# echo /usr/local/src/test{1..10}.txt | xargs -n 1 cp -v /usr/local/src/test.txt# 将/usr/local/src/test.txt复制成test1.txt..test10.txt -n 1告诉xargs命令每个命令行最多使用一个参数，并发送到cp命令中 cp复制文件命令 -v启用详细模式来显示更多的复制细节 123# man cp# man echo# man xargs 利用progress 命令来帮助监控运行中的（cp、mv、dd、tar 等等）的进度。","link":"/posts/3077397386/"},{"title":"cut命令用法","text":"语法 1234cut OPTION... [FILE]...cut -[n]b filecut -c filecut -d[分隔符] -f[域] file cut参数解释和用法123456789-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非指定了 -n 标志。-c ：以字符为单位进行分割。-d ：自定义分隔符，默认为制表符。-f ：与-d一起使用，指定显示哪个区域，使用Tab作为默认的分隔符。-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除--complement : 补充选中的部分，即反选。--output-delimiter : 修改输出时使用的分隔符。--only-delimited : 不输出不包含分隔符的列。 -b123456789101.剪切单个字节# cut -b 1 test1.txt //剪切每一行的第1个字节2.剪切多个字节# -b 1,3,5 //剪切每一行第 1 3 5 个字符# -b 1-5 //剪切每一行第 1-5 个字符 # -b -5 //剪切每一行第 1-5 个字符# -b 3- //剪切每一行第 3个字符以后的-b 只是针对字节进行裁剪，对一个汉字进行字节裁剪，得到的结果必然是乱码;若想使用 -b 命令对字节进行裁剪，那么则需要使用 -n 选项，此选项的作用是取消分割多字节字符。 -c1234cut -c 1 test2.txtcut -c 2 test2.txtcut -c 1-3 test2.txt -c 作用就是剪切字符，和上面的 -nb 有些类似 -f123456789# cat /etc/passwd | head -n 3root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologin# cat /etc/passwd | head -n 3 | cut -d : -f 1 //以&quot;:&quot;为分隔符，取第一部分[第一部分为分隔符左边]rootbindaemon-b -c 只是针对于格式固定的数据中剪切，对于一些格式不固定的，就无法获取到我们想要的数据，因此便有了 -f 域的概念。 –complement补全选择的输出 123456789要补全选择输出的字段（即反选），使用 --complement 选项。这一选项输出所有的字段，除了指定的字段。例：输出 /etc/passwd 文件中包含 /bin/bash 的行中除了第二个字段以外的所有字段：[root@localhost ~]# grep &quot;/bin/bash&quot; /etc/passwdroot:x:0:0:root:/root:/bin/bash[root@localhost ~]# grep &quot;/bin/bash&quot; /etc/passwd| cut -d: -f2x[root@localhost ~]# grep &quot;/bin/bash&quot; /etc/passwd| cut -d: --complement -f2root:0:0:root:/root:/bin/bash[root@localhost ~]# –output-delimiter指定输出的分隔符 1使用 --output-delimiter 可以指定输出的分隔符。输入的分隔符由 -d 来指定，而输出分隔符和输入分隔符默认是一样的。 –only-delimited","link":"/posts/971963755/"},{"title":"Hexo + yilia主题修改网站图标","text":"1、下载图标 2、将.ico图标放到themes/yilia/source/img文件夹下 3、找到hexo\\themes\\yilia\\layout_partial\\head.ejs，修改下面一段代码为 123&lt;% if (theme.favicon){ %&gt; &lt;link rel=&quot;icon&quot; href=&quot;/img/favicon.ico&quot;&gt; &lt;% } %&gt; 4、检查 1hexo s","link":"/posts/3314146010/"},{"title":"Hexo图片不显示","text":"Hexo图片不显示和图片路径问题 1、下载hexo-asset-image插件在Hexo根目录下打开git bash 1npm install https://github.com/7ym0n/hexo-asset-image --save 2、Typora图像路径设置 插入图片时，图片文件保存路径: ./${filename} 即保存到与 当前正在编辑的文件名 相同的同级文件夹下 3、配置Hexo图片文件夹打开Hexo根目录下的_config.yml文件 搜索 post_asset_folder，false 改为 true 修改后，每次 ‘hexo new page’ 生成新文章，都会在文章文件同级目录创建一个与文章文件名同名的文件夹。 PS1：这被称为 文章资源文件夹, 参考官方文档：https://hexo.io/zh-cn/docs/asset-folders PS2：本地创建.md文件编辑文章，然后插入图片同样生效。 4、转换Typora图片路径插件正在 Typora下使用 ![example](postname/example.jpg)引用图片，享受实时预览，但需发布到 Hexo，使之发布后能正确加载我们的图片，还需要做以下转换: 1![example](postname/example.jpg) --&gt; {% asset_img example.jpg example %} 而这个转换我们需要在文章编译为html之前，在编译过程中转换为 这样的标签{% asset_img example.jpg example %} PS: Hexo官方文档 - 相对路径引用的标签插件 打开_config.yml文件，修改下述内容 1post_asset_folder: true 5、测试1hexo g &amp;&amp; hexo d 参考文档1 参考文档2 参考文档3","link":"/posts/1315565666/"},{"title":"yilia主题添加社交图标","text":"Yilia主题自带是社交图标比较少，记录一种不用 webpack 打包的方式，添加自己需要的社交图标。 1、找到需要添加的图标素材阿里巴巴矢量图标库，图片或者svg文件 2、打开 yilia\\source\\fonts 目录 找到这四个文件，先备份。 3、打开百度字体编辑器4、新建项目、导入刚才的iconfont.xxxxx.svg和你找到的图标素材(图片或者svg等) 5、修改字形信息选中社交图标，点左上方的字形信息 填好社交图标的unicode(注意格式，这里是$开头)和命名并记录下来，一会要用到。 6、保存、下载项目 7、替换文件解压后得到以下文件，只要这四个文件，把他们重命名为第2步里 yilia\\source\\fonts 目录的那4个同样后缀的文件，然后替换掉那4个文件。 8、修改yilia\\source目录下的main.xxxx.css文件在末尾添加代码： 1234.icon-图标名:before{content:&quot;图标unicode&quot;}/* 之前的图标unicode，开头的$改成\\,如 $E6C --&gt; \\E6C */#header .header-nav .social a.图标名{background:自定义颜色;border:3px solid 自定义颜色}#header .header-nav .social a.图标名:hover{border:3px solid 自定义颜色} 9、重新部署1hexo g &amp;&amp; hexo s 参考链接","link":"/posts/3934008348/"},{"title":"LVM磁盘初始化和扩缩容","text":"新服务器LVM磁盘初始化，方便后期磁盘扩容 一、新磁盘初始化1、检查是否存在目录、检查存在且已挂载的磁盘、检查是否已存在的逻辑卷 2、磁盘初始化 123456789101112131415161.创建主分区，并修改文件系统为8e，LVM格式cat &gt;xxx.txt &lt;&lt;EOFnplt8ewEOFfdisk /dev/sdb &lt; xxx.txt2.刷新磁盘分区，并格式化创建的磁盘partprobe /dev/sdbmkfs.xfs /dev/sdb1 3.创建物理卷 12mkdir -p /datapvcreate -f /dev/sdb1 4.创建卷组 12vgcreate VolGroup01 /dev/sdb1vgchange -ay VolGroup01 5.创建逻辑卷 1lvcreate -l 100%VG -n LVdata VolGroup01 6.格式化逻辑卷 1mkfs.xfs /dev/mapper/VolGroup01-LVdata 7.挂载目录 1mount /dev/mapper/VolGroup01-LVdata /data 8.添加开机自动挂载 123echo &quot;/dev/mapper/VolGroup01-LVdata /data xfs defaults 0 0&quot; &gt;&gt; /etc/fstabmount -a # 刷新/etc/fastab表lsblk 二、LVM磁盘(扩/缩)容添加磁盘[热添加硬盘]1234567891011121314添加：echo &quot;scsi add-single-device 0 0 1 0&quot; &gt;/proc/scsi/scsi移除：echo &quot;scsi remove-single-device 0 0 1 0&quot; &gt; /proc/scsi/scsi命令行解释：命令行中的 0 0 1 0 需要自行修改成相应的参数：0 : SCSI HBA ID //主机 ID0 : SCSI Channel //channel ID1 : SCSI ID //target ID0 : LUN ID //LUN ID添加也可以使用 echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host2/scan'- - -'代表channel，target和LUN编号。以上命令会导致host2下所有channel，target以及可见LUN被扫描 添加一块硬盘，通过 lsscsi 命令可以查看对应参数 12345678910111213141516171819202122232425262728293031323334[root@localhost ~]# lsscsi[0:0:0:0] disk VMware, VMware Virtual S 1.0 /dev/sda [2:0:0:0] cd/dvd NECVMWar VMware IDE CDR10 1.00 /dev/sr0[root@localhost ~]# cat /proc/scsi/scsi Attached devices:Host: scsi0 Channel: 00 Id: 00 Lun: 00 Vendor: VMware, Model: VMware Virtual S Rev: 1.0 Type: Direct-Access ANSI SCSI revision: 02Host: scsi2 Channel: 00 Id: 00 Lun: 00 Vendor: NECVMWar Model: VMware IDE CDR10 Rev: 1.00 Type: CD-ROM ANSI SCSI revision: 05# 根据Host: scsi0的类型可以知道，scsi硬盘使用的总线是host0[root@localhost ~]# ls /sys/class/scsi_host/host0 host1 host2[root@localhost ~]# echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host0/scan [root@localhost ~]# lsscsi[0:0:0:0] disk VMware, VMware Virtual S 1.0 /dev/sda [0:0:1:0] disk VMware, VMware Virtual S 1.0 /dev/sdb [2:0:0:0] cd/dvd NECVMWar VMware IDE CDR10 1.00 /dev/sr0 # 或者使用 echo &quot;scsi add-single-device 0 0 1 0&quot; &gt;/proc/scsi/scsi 也可以发现设备[root@localhost ~]# lsblk /dev/sdbNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsdb 8:16 0 5G 0 disk[root@localhost ~]# cat /proc/scsi/scsiAttached devices:Host: scsi0 Channel: 00 Id: 00 Lun: 00 Vendor: VMware, Model: VMware Virtual S Rev: 1.0 Type: Direct-Access ANSI SCSI revision: 02Host: scsi2 Channel: 00 Id: 00 Lun: 00 Vendor: NECVMWar Model: VMware IDE CDR10 Rev: 1.00 Type: CD-ROM ANSI SCSI revision: 05Host: scsi0 Channel: 00 Id: 01 Lun: 00 Vendor: VMware, Model: VMware Virtual S Rev: 1.0 Type: Direct-Access ANSI SCSI revision: 02 热移除硬盘123456789101112[root@localhost ~]# echo &quot;scsi remove-single-device 0 0 1 0&quot; &gt;/proc/scsi/scsi[root@localhost ~]# lsscsi[0:0:0:0] disk VMware, VMware Virtual S 1.0 /dev/sda [2:0:0:0] cd/dvd NECVMWar VMware IDE CDR10 1.00 /dev/sr0[root@localhost ~]# cat /proc/scsi/scsiAttached devices:Host: scsi0 Channel: 00 Id: 00 Lun: 00 Vendor: VMware, Model: VMware Virtual S Rev: 1.0 Type: Direct-Access ANSI SCSI revision: 02Host: scsi2 Channel: 00 Id: 00 Lun: 00 Vendor: NECVMWar Model: VMware IDE CDR10 Rev: 1.00 Type: CD-ROM ANSI SCSI revision: 05 磁盘扩容1 磁盘缩容1 参考文档1 参考文档2","link":"/posts/899539592/"},{"title":"春赏百花冬观雪，醒亦念卿，梦亦念卿","text":"浮世万千，吾爱有三：日，月，卿 I love three things in the world sun,moon,and you 日为朝，月为暮，卿为朝朝暮暮。 sun for moring moon for night and you forever.","link":"/posts/1725941556/"},{"title":"喜欢橘子汁~","text":"喜欢橘子汁…","link":"/posts/3352027318/"},{"title":"Hello Hexo","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/posts/2708806665/"}],"tags":[{"name":"Hello Hexo","slug":"Hello-Hexo","link":"/tags/Hello-Hexo/"},{"name":"tips","slug":"tips","link":"/tags/tips/"},{"name":"运维","slug":"运维","link":"/tags/%E8%BF%90%E7%BB%B4/"},{"name":"linux - 运维","slug":"linux-运维","link":"/tags/linux-%E8%BF%90%E7%BB%B4/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"ps","slug":"ps","link":"/tags/ps/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"yilia","slug":"yilia","link":"/tags/yilia/"},{"name":"amazing-plugns","slug":"amazing-plugns","link":"/tags/amazing-plugns/"}],"categories":[{"name":"Hexo-blog","slug":"Hexo-blog","link":"/categories/Hexo-blog/"}]}